// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alliance/delegations.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Delegation struct {
	// delegator_address is the bech32-encoded address of the delegator.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// validator_address is the bech32-encoded address of the validator.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// denom of token staked
	Denom string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	// shares define the delegation shares received.
	Shares                github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=shares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"shares"`
	RewardHistory         []RewardHistory                        `protobuf:"bytes,5,rep,name=reward_history,json=rewardHistory,proto3" json:"reward_history"`
	LastRewardClaimHeight uint64                                 `protobuf:"varint,6,opt,name=last_reward_claim_height,json=lastRewardClaimHeight,proto3" json:"last_reward_claim_height,omitempty"`
}

func (m *Delegation) Reset()         { *m = Delegation{} }
func (m *Delegation) String() string { return proto.CompactTextString(m) }
func (*Delegation) ProtoMessage()    {}
func (*Delegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_8303368cab785f76, []int{0}
}
func (m *Delegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegation.Merge(m, src)
}
func (m *Delegation) XXX_Size() int {
	return m.Size()
}
func (m *Delegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegation.DiscardUnknown(m)
}

var xxx_messageInfo_Delegation proto.InternalMessageInfo

type Redelegation struct {
	DelegatorAddress    string     `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	SrcValidatorAddress string     `protobuf:"bytes,2,opt,name=src_validator_address,json=srcValidatorAddress,proto3" json:"src_validator_address,omitempty"`
	DstValidatorAddress string     `protobuf:"bytes,3,opt,name=dst_validator_address,json=dstValidatorAddress,proto3" json:"dst_validator_address,omitempty"`
	Balance             types.Coin `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance"`
}

func (m *Redelegation) Reset()         { *m = Redelegation{} }
func (m *Redelegation) String() string { return proto.CompactTextString(m) }
func (*Redelegation) ProtoMessage()    {}
func (*Redelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_8303368cab785f76, []int{1}
}
func (m *Redelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Redelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Redelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Redelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redelegation.Merge(m, src)
}
func (m *Redelegation) XXX_Size() int {
	return m.Size()
}
func (m *Redelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Redelegation.DiscardUnknown(m)
}

var xxx_messageInfo_Redelegation proto.InternalMessageInfo

type QueuedRedelegation struct {
	Entries []*Redelegation `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *QueuedRedelegation) Reset()         { *m = QueuedRedelegation{} }
func (m *QueuedRedelegation) String() string { return proto.CompactTextString(m) }
func (*QueuedRedelegation) ProtoMessage()    {}
func (*QueuedRedelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_8303368cab785f76, []int{2}
}
func (m *QueuedRedelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedRedelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedRedelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedRedelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedRedelegation.Merge(m, src)
}
func (m *QueuedRedelegation) XXX_Size() int {
	return m.Size()
}
func (m *QueuedRedelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedRedelegation.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedRedelegation proto.InternalMessageInfo

type Undelegation struct {
	DelegatorAddress string     `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ValidatorAddress string     `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Balance          types.Coin `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance"`
}

func (m *Undelegation) Reset()         { *m = Undelegation{} }
func (m *Undelegation) String() string { return proto.CompactTextString(m) }
func (*Undelegation) ProtoMessage()    {}
func (*Undelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_8303368cab785f76, []int{3}
}
func (m *Undelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Undelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Undelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Undelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Undelegation.Merge(m, src)
}
func (m *Undelegation) XXX_Size() int {
	return m.Size()
}
func (m *Undelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Undelegation.DiscardUnknown(m)
}

var xxx_messageInfo_Undelegation proto.InternalMessageInfo

type QueuedUndelegation struct {
	Entries []*Undelegation `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *QueuedUndelegation) Reset()         { *m = QueuedUndelegation{} }
func (m *QueuedUndelegation) String() string { return proto.CompactTextString(m) }
func (*QueuedUndelegation) ProtoMessage()    {}
func (*QueuedUndelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_8303368cab785f76, []int{4}
}
func (m *QueuedUndelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedUndelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedUndelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedUndelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedUndelegation.Merge(m, src)
}
func (m *QueuedUndelegation) XXX_Size() int {
	return m.Size()
}
func (m *QueuedUndelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedUndelegation.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedUndelegation proto.InternalMessageInfo

type AllianceValidatorInfo struct {
	GlobalRewardHistory  []RewardHistory `protobuf:"bytes,1,rep,name=global_reward_history,json=globalRewardHistory,proto3" json:"global_reward_history"`
	TotalDelegatorShares []types.DecCoin `protobuf:"bytes,2,rep,name=total_delegator_shares,json=totalDelegatorShares,proto3" json:"total_delegator_shares"`
	ValidatorShares      []types.DecCoin `protobuf:"bytes,3,rep,name=validator_shares,json=validatorShares,proto3" json:"validator_shares"`
	VotingPower          int64           `protobuf:"varint,4,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
}

func (m *AllianceValidatorInfo) Reset()         { *m = AllianceValidatorInfo{} }
func (m *AllianceValidatorInfo) String() string { return proto.CompactTextString(m) }
func (*AllianceValidatorInfo) ProtoMessage()    {}
func (*AllianceValidatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8303368cab785f76, []int{5}
}
func (m *AllianceValidatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllianceValidatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllianceValidatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllianceValidatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllianceValidatorInfo.Merge(m, src)
}
func (m *AllianceValidatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *AllianceValidatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AllianceValidatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AllianceValidatorInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Delegation)(nil), "alliance.Delegation")
	proto.RegisterType((*Redelegation)(nil), "alliance.Redelegation")
	proto.RegisterType((*QueuedRedelegation)(nil), "alliance.QueuedRedelegation")
	proto.RegisterType((*Undelegation)(nil), "alliance.Undelegation")
	proto.RegisterType((*QueuedUndelegation)(nil), "alliance.QueuedUndelegation")
	proto.RegisterType((*AllianceValidatorInfo)(nil), "alliance.AllianceValidatorInfo")
}

func init() { proto.RegisterFile("alliance/delegations.proto", fileDescriptor_8303368cab785f76) }

var fileDescriptor_8303368cab785f76 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x4d, 0x4f, 0xd4, 0x40,
	0x18, 0xc7, 0xdb, 0x2d, 0x6f, 0x0e, 0xf8, 0x56, 0xb6, 0x58, 0x88, 0xe9, 0x22, 0x07, 0xc3, 0x65,
	0x5b, 0xc1, 0x83, 0xd1, 0x78, 0x01, 0x6a, 0x82, 0x09, 0x26, 0x50, 0xd4, 0x18, 0x2f, 0xcd, 0xb4,
	0x33, 0x76, 0x27, 0x76, 0x67, 0x36, 0x33, 0x03, 0xc8, 0x37, 0xf0, 0xa6, 0x1f, 0x81, 0x0f, 0x41,
	0x3c, 0x7b, 0xe4, 0x48, 0x38, 0x19, 0x0f, 0x44, 0xe1, 0xe2, 0xc7, 0x30, 0x6d, 0xa7, 0xdd, 0x2e,
	0x12, 0xc1, 0xe8, 0xc1, 0x53, 0xdb, 0xe7, 0xff, 0x3c, 0xbf, 0xe9, 0xfc, 0x9f, 0x99, 0x07, 0xcc,
	0xc0, 0x34, 0x25, 0x90, 0xc6, 0xd8, 0x43, 0x38, 0xc5, 0x09, 0x94, 0x84, 0x51, 0xe1, 0xf6, 0x38,
	0x93, 0xcc, 0x1c, 0x2b, 0xb5, 0x99, 0x66, 0xc2, 0x12, 0x96, 0x07, 0xbd, 0xec, 0xad, 0xd0, 0x67,
	0x9c, 0x98, 0x89, 0x2e, 0x13, 0x5e, 0x04, 0x05, 0xf6, 0xb6, 0x17, 0x22, 0x2c, 0xe1, 0x82, 0x17,
	0x33, 0x42, 0x95, 0x3e, 0x5d, 0xe8, 0x61, 0x51, 0x58, 0x7c, 0x28, 0xc9, 0xaa, 0x96, 0xed, 0x41,
	0x0e, 0xbb, 0x2a, 0x3c, 0xf7, 0xc1, 0x00, 0xc0, 0xaf, 0xfe, 0xc3, 0x7c, 0x02, 0x6e, 0xaa, 0xbf,
	0x62, 0x3c, 0x84, 0x08, 0x71, 0x2c, 0x84, 0xad, 0xcf, 0xea, 0xf3, 0x57, 0x96, 0xed, 0xa3, 0xfd,
	0x76, 0x53, 0x21, 0x97, 0x0a, 0x65, 0x53, 0x72, 0x42, 0x93, 0xe0, 0x46, 0x55, 0xa2, 0xe2, 0x19,
	0x66, 0x1b, 0xa6, 0x04, 0x0d, 0x60, 0x1a, 0x17, 0x61, 0xaa, 0x92, 0x12, 0xd3, 0x04, 0xc3, 0x08,
	0x53, 0xd6, 0xb5, 0x8d, 0xac, 0x34, 0x28, 0x3e, 0xcc, 0xe7, 0x60, 0x44, 0x74, 0x20, 0xc7, 0xc2,
	0x1e, 0xca, 0x89, 0x8f, 0x0f, 0x8e, 0x5b, 0xda, 0xd7, 0xe3, 0xd6, 0xdd, 0x84, 0xc8, 0xce, 0x56,
	0xe4, 0xc6, 0xac, 0xab, 0xb6, 0xae, 0x1e, 0x6d, 0x81, 0xde, 0x7a, 0x72, 0xb7, 0x87, 0x85, 0xeb,
	0xe3, 0xf8, 0x68, 0xbf, 0x0d, 0xd4, 0xfa, 0x3e, 0x8e, 0x03, 0xc5, 0x32, 0x7d, 0x70, 0x8d, 0xe3,
	0x1d, 0xc8, 0x51, 0xd8, 0x21, 0x42, 0x32, 0xbe, 0x6b, 0x0f, 0xcf, 0x1a, 0xf3, 0xe3, 0x8b, 0xb7,
	0xdc, 0xd2, 0x38, 0x37, 0xc8, 0xf5, 0xd5, 0x42, 0x5e, 0x1e, 0xca, 0x96, 0x0d, 0xae, 0xf2, 0x7a,
	0xd0, 0x7c, 0x00, 0xec, 0x14, 0x0a, 0x19, 0x2a, 0x54, 0x9c, 0x42, 0xd2, 0x0d, 0x3b, 0x98, 0x24,
	0x1d, 0x69, 0x8f, 0xcc, 0xea, 0xf3, 0x43, 0x81, 0x95, 0xe9, 0x05, 0x69, 0x25, 0x53, 0x57, 0x73,
	0xf1, 0xd1, 0xd8, 0xfb, 0xbd, 0x96, 0xf6, 0x63, 0xaf, 0xa5, 0xcd, 0x7d, 0x6a, 0x80, 0x89, 0x00,
	0xa3, 0x7f, 0xde, 0x93, 0x35, 0x60, 0x09, 0x1e, 0x87, 0x7f, 0xde, 0x97, 0x49, 0xc1, 0xe3, 0x97,
	0x67, 0x5b, 0xb3, 0x06, 0x2c, 0x24, 0xe4, 0x39, 0x34, 0xe3, 0x22, 0x1a, 0x12, 0xf2, 0x17, 0xda,
	0x43, 0x30, 0x1a, 0xc1, 0x34, 0x33, 0x39, 0xef, 0xe9, 0xf8, 0xe2, 0xb4, 0xab, 0x8a, 0xb3, 0x93,
	0xee, 0xaa, 0x93, 0xee, 0xae, 0x30, 0x42, 0x95, 0xef, 0x65, 0x7e, 0xcd, 0xb8, 0x75, 0x60, 0x6e,
	0x6c, 0xe1, 0x2d, 0x8c, 0x06, 0xdc, 0xbb, 0x07, 0x46, 0x31, 0x95, 0x9c, 0xe0, 0xcc, 0xb3, 0xac,
	0xa1, 0x53, 0xf5, 0x86, 0xf6, 0x13, 0x83, 0x32, 0xad, 0x46, 0xfc, 0xae, 0x83, 0x89, 0x17, 0x14,
	0xfd, 0xaf, 0xd7, 0xa3, 0xe6, 0x9a, 0xf1, 0xf7, 0xae, 0x0d, 0x6c, 0xf4, 0x77, 0xae, 0xd5, 0x13,
	0xcf, 0x73, 0xed, 0x73, 0x03, 0x58, 0x4b, 0x2a, 0xb9, 0xea, 0xf4, 0x53, 0xfa, 0x86, 0x99, 0x1b,
	0xc0, 0x4a, 0x52, 0x16, 0xc1, 0x34, 0x3c, 0x73, 0xd5, 0xf4, 0xcb, 0x5c, 0xb5, 0xc9, 0xa2, 0x76,
	0x40, 0x32, 0x5f, 0x81, 0x29, 0xc9, 0x24, 0x4c, 0xc3, 0x7e, 0x5f, 0xd4, 0x70, 0x68, 0xe4, 0xcc,
	0xdb, 0xe7, 0x5a, 0xe2, 0xe3, 0xb8, 0xe6, 0x4a, 0x33, 0x27, 0xf8, 0x25, 0x60, 0xb3, 0x18, 0x08,
	0xcf, 0x40, 0xdf, 0xf1, 0x92, 0x69, 0x5c, 0x9a, 0x79, 0xbd, 0xaa, 0x55, 0xb8, 0x3b, 0x60, 0x62,
	0x9b, 0x49, 0x42, 0x93, 0xb0, 0xc7, 0x76, 0x30, 0xcf, 0xcf, 0xb9, 0x11, 0x8c, 0x17, 0xb1, 0xf5,
	0x2c, 0xd4, 0xb7, 0x70, 0x79, 0xf5, 0xe0, 0xc4, 0xd1, 0x0f, 0x4f, 0x1c, 0xfd, 0xdb, 0x89, 0xa3,
	0x7f, 0x3c, 0x75, 0xb4, 0xc3, 0x53, 0x47, 0xfb, 0x72, 0xea, 0x68, 0xaf, 0xdd, 0xda, 0x90, 0xa3,
	0x8c, 0x13, 0xd8, 0xa6, 0x58, 0x7a, 0xd5, 0x6c, 0x7f, 0xd7, 0x7f, 0xcd, 0x07, 0x5e, 0x34, 0x92,
	0x8f, 0xf9, 0xfb, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x87, 0x5c, 0x74, 0xd4, 0x76, 0x06, 0x00,
	0x00,
}

func (m *Delegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastRewardClaimHeight != 0 {
		i = encodeVarintDelegations(dAtA, i, uint64(m.LastRewardClaimHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RewardHistory) > 0 {
		for iNdEx := len(m.RewardHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegations(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegations(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDelegations(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintDelegations(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintDelegations(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Redelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Redelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Redelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDelegations(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.DstValidatorAddress) > 0 {
		i -= len(m.DstValidatorAddress)
		copy(dAtA[i:], m.DstValidatorAddress)
		i = encodeVarintDelegations(dAtA, i, uint64(len(m.DstValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrcValidatorAddress) > 0 {
		i -= len(m.SrcValidatorAddress)
		copy(dAtA[i:], m.SrcValidatorAddress)
		i = encodeVarintDelegations(dAtA, i, uint64(len(m.SrcValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintDelegations(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueuedRedelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedRedelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedRedelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegations(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Undelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Undelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Undelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDelegations(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintDelegations(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintDelegations(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueuedUndelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedUndelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedUndelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegations(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AllianceValidatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllianceValidatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllianceValidatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPower != 0 {
		i = encodeVarintDelegations(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ValidatorShares) > 0 {
		for iNdEx := len(m.ValidatorShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegations(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TotalDelegatorShares) > 0 {
		for iNdEx := len(m.TotalDelegatorShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalDelegatorShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegations(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GlobalRewardHistory) > 0 {
		for iNdEx := len(m.GlobalRewardHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GlobalRewardHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegations(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDelegations(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegations(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Delegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegations(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegations(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDelegations(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovDelegations(uint64(l))
	if len(m.RewardHistory) > 0 {
		for _, e := range m.RewardHistory {
			l = e.Size()
			n += 1 + l + sovDelegations(uint64(l))
		}
	}
	if m.LastRewardClaimHeight != 0 {
		n += 1 + sovDelegations(uint64(m.LastRewardClaimHeight))
	}
	return n
}

func (m *Redelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegations(uint64(l))
	}
	l = len(m.SrcValidatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegations(uint64(l))
	}
	l = len(m.DstValidatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegations(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovDelegations(uint64(l))
	return n
}

func (m *QueuedRedelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovDelegations(uint64(l))
		}
	}
	return n
}

func (m *Undelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegations(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegations(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovDelegations(uint64(l))
	return n
}

func (m *QueuedUndelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovDelegations(uint64(l))
		}
	}
	return n
}

func (m *AllianceValidatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GlobalRewardHistory) > 0 {
		for _, e := range m.GlobalRewardHistory {
			l = e.Size()
			n += 1 + l + sovDelegations(uint64(l))
		}
	}
	if len(m.TotalDelegatorShares) > 0 {
		for _, e := range m.TotalDelegatorShares {
			l = e.Size()
			n += 1 + l + sovDelegations(uint64(l))
		}
	}
	if len(m.ValidatorShares) > 0 {
		for _, e := range m.ValidatorShares {
			l = e.Size()
			n += 1 + l + sovDelegations(uint64(l))
		}
	}
	if m.VotingPower != 0 {
		n += 1 + sovDelegations(uint64(m.VotingPower))
	}
	return n
}

func sovDelegations(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegations(x uint64) (n int) {
	return sovDelegations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Delegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardHistory = append(m.RewardHistory, RewardHistory{})
			if err := m.RewardHistory[len(m.RewardHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRewardClaimHeight", wireType)
			}
			m.LastRewardClaimHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRewardClaimHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Redelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Redelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Redelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedRedelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedRedelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedRedelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Redelegation{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Undelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Undelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Undelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedUndelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedUndelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedUndelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Undelegation{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllianceValidatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllianceValidatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllianceValidatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalRewardHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalRewardHistory = append(m.GlobalRewardHistory, RewardHistory{})
			if err := m.GlobalRewardHistory[len(m.GlobalRewardHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegatorShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDelegatorShares = append(m.TotalDelegatorShares, types.DecCoin{})
			if err := m.TotalDelegatorShares[len(m.TotalDelegatorShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorShares = append(m.ValidatorShares, types.DecCoin{})
			if err := m.ValidatorShares[len(m.ValidatorShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegations
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegations
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegations
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegations        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegations          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegations = fmt.Errorf("proto: unexpected end of group")
)
